// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/admin_ports.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	v2 "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// GetDashboard mocks base method.
func (m *MockAdminRepository) GetDashboard() ([]Offer, []OrderStatus, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard")
	ret0, _ := ret[0].([]Offer)
	ret1, _ := ret[1].([]OrderStatus)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockAdminRepositoryMockRecorder) GetDashboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockAdminRepository)(nil).GetDashboard))
}

// LoginAdmin mocks base method.
func (m *MockAdminRepository) LoginAdmin(email, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", email, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockAdminRepositoryMockRecorder) LoginAdmin(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockAdminRepository)(nil).LoginAdmin), email, password)
}

// PatchStatus mocks base method.
func (m *MockAdminRepository) PatchStatus(id int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockAdminRepositoryMockRecorder) PatchStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockAdminRepository)(nil).PatchStatus), id, status)
}

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// GetDashboard mocks base method.
func (m *MockAdminService) GetDashboard() ([]Offer, []OrderStatus, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard")
	ret0, _ := ret[0].([]Offer)
	ret1, _ := ret[1].([]OrderStatus)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockAdminServiceMockRecorder) GetDashboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockAdminService)(nil).GetDashboard))
}

// LoginAdmin mocks base method.
func (m *MockAdminService) LoginAdmin(email, password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", email, password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockAdminServiceMockRecorder) LoginAdmin(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockAdminService)(nil).LoginAdmin), email, password)
}

// PatchStatus mocks base method.
func (m *MockAdminService) PatchStatus(id int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockAdminServiceMockRecorder) PatchStatus(id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockAdminService)(nil).PatchStatus), id, status)
}

// MockAdminHandlers is a mock of AdminHandlers interface.
type MockAdminHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockAdminHandlersMockRecorder
}

// MockAdminHandlersMockRecorder is the mock recorder for MockAdminHandlers.
type MockAdminHandlersMockRecorder struct {
	mock *MockAdminHandlers
}

// NewMockAdminHandlers creates a new mock instance.
func NewMockAdminHandlers(ctrl *gomock.Controller) *MockAdminHandlers {
	mock := &MockAdminHandlers{ctrl: ctrl}
	mock.recorder = &MockAdminHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminHandlers) EXPECT() *MockAdminHandlersMockRecorder {
	return m.recorder
}

// GetDashboard mocks base method.
func (m *MockAdminHandlers) GetDashboard(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockAdminHandlersMockRecorder) GetDashboard(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockAdminHandlers)(nil).GetDashboard), c)
}

// LoginAdmin mocks base method.
func (m *MockAdminHandlers) LoginAdmin(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockAdminHandlersMockRecorder) LoginAdmin(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockAdminHandlers)(nil).LoginAdmin), c)
}

// PatchStatus mocks base method.
func (m *MockAdminHandlers) PatchStatus(c *v2.Ctx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStatus", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStatus indicates an expected call of PatchStatus.
func (mr *MockAdminHandlersMockRecorder) PatchStatus(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStatus", reflect.TypeOf((*MockAdminHandlers)(nil).PatchStatus), c)
}
